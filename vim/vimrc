"-----------------------------Plug-VIM-----------------------------------"
call plug#begin('~/.vim/bundle')
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'jlanzarotta/bufexplorer'
Plug 'majutsushi/tagbar'
"Plug 'valloric/youcompleteme'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'tomtom/tcomment_vim'
"Plug 'nfvs/vim-perforce'
"Plu 'tarmack/vim-python-ftplugin'
"Plu 'fatih/vim-go'
"Plug 'rking/ag.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

"""""""""COLORS""""""""""""""""""
Plug 'altercation/vim-colors-solarized'
Plug 'w0ng/vim-hybrid'
"Plugin 'jeaye/color_coded'

call plug#end()

"-----------------------------Plug-VIM-----------------------------------"

filetype plugin indent on    " required
syntax on
" where search all inncludes with 'gf'
"let &path.="/home/igala/WORK/Perforce/SPEECH,/home/igala/WORK/Perforce/SPEECH/deliveries,/home/igala/WORK/Perforce/SPEECH_products/armv7-meucy17-adt4.9.1-nop-trc-dbg-rtti/gen,/usr/include/c++/4.8"
set tags=./tags,tags,/home/igala/tags/tags

let Tlist_Compact_Format = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Close_On_Select = 1
let Tlist_Process_File_Always = 1
let Tlist_Ctags_Cmd = 'ctags --extra=-q --c++-kinds=-p' " to disable two tags creation
"generatee -> ctags -L - --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ indexList
"au FileType cpp set tags^=~/tags
"set includeexpr=substitute(v:fname,'\\.','/','g') for java

"let g:ag_working_path_mode="r"

" CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_by_filename = 1
let g:ctrlp_working_path_mode = 'cr'
let g:ctrlp_root_markers = ['.ctrlp']
let g:ctrlp_custom_ignore = {
  \   'dir':  '\v[\/](\.git|BUILD[-_a-z0-9]*|sstate-cache|downloads|buildhistory|build[-_a-zA-Z]*)$',
  \ 'file': '\v\.(exe|a|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
"let g:ctrlp_custom_ignore = '\v/|(.(swp|ico|git|svn))$'
set wildignore+=*/tmp/*,*.so,*.a,*.swp,*.zip,.git " for cnlp plugin
"let g:ctrlp_extensions = ['tag']
"let g:ctrlp_show_hidden = 1
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
"let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files']
let g:ctrlp_open_multiple_files = '3i'
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  " let g:ctrlp_use_caching = 0
endif
"let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

"
" YouCompleteMe options
"
let g:ycm_register_as_syntastic_checker = 1 "default 1
let g:Show_diagnostics_ui = 1 "default 1
"will put icons in Vim's gutter on lines that have a diagnostic set.
"Turning this off will also turn off the YcmErrorLine and YcmWarningLine
"highlighting
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_always_populate_location_list = 0 "default 0
let g:ycm_open_loclist_on_ycm_diags = 1 "default 1
let g:ycm_complete_in_strings = 1 "default 1
let g:ycm_collect_identifiers_from_tags_files = 0 "default 0
let g:ycm_path_to_python_interpreter = '' "default ''
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py" "where to search for .ycm_extra_conf.py if not found
let g:ycm_confirm_extra_conf = 0 " confirm to load python file
let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
let g:ycm_filetype_whitelist = { '*': 1 }
"let g:ycm_key_invoke_completion = '<C-Space>'
let g:ycm_collect_identifiers_from_tags_files=1
set completeopt-=preview
"" complete syntax keywords
"let g:ycm_seed_identifiers_with_syntax=1

let g:UltiSnipsExpandTrigger="<c-a>"
let g:UltiSnipsListSnippets="<c-d>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"let g:UltiSnipsUsePythonVersion=2
" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" Airline
let g:airline_symbols_ascii = 1
if !exists('g:airline_symbols')
   let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '¶'
"let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.branch = '⎇'
"let g:airline_symbols.notexists = '∄'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#tab_nr_type = 2
let g:airline#extensions#tabline#buffers_label = 'b'
let g:airline#extensions#tabline#tabs_label = 't'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 2
let g:airline_section_z = airline#section#create(['%3p%%', g:airline_symbols.space, 'linenr', 'maxlinenr', '%3c(0x%04B)'])

" Fugitive
autocmd BufReadPost fugitive://* set bufhidden=delete

"That way, the cursor is on NERDTree if I haven't opened a specific file, but if I did pick a file it starts in the main window.
autocmd VimEnter * if !argc() | NERDTree | endif
silent! nmap <C-n> :NERDTreeToggle<CR>

"set exrc
"set secure " dangeres command are forbidden
""folding settings use za,zR,zM command
"set foldmethod=indent   "fold based on indent
"set foldnestmax=10      "deepest fold is 10 levels
"set nofoldenable        "dont fold by default
"set foldlevel=3         "this is just what i use
"set foldcolumn=0 "  do not show line scroll to fold down the code
"
"set cmdheight=2
"set shortmess=a
"set mouse=a
set hidden "hide buffer instead of closing them
"set termencoding=utf-8
"set autoindent " use indentation of previous line
set smartindent " use intelligent indentation for C
"set cin " indent in C style
"set et " auto replace
"set noruler
"
"set wrap
"set linebreak " переносить целые слова
"set formatoptions=qrn1
"nnoremap j gj
"nnoremap k gk
"
"set vb " visual bell
"set showcmd
"set number
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise
set expandtab " change tab on whitespace
set tabstop=3 " 3 spaces replace tab
set shiftwidth=3
set smarttab
"
"set title         " change the terminal's title
set nobackup
set noswapfile
"set winminheight=0
""set noequalalways
""set winheight=9999

"au -> autocmd ->autocommand
au Filetype *.c setlocal ts=3 sw=3 sts=3 cino=>5n-3f0-2{2low1st0 expandtab

"au BufNewFile,BufRead * let b:mtrailingws=matchadd('ErrorMsg', '\s\+$', -1)
"au BufNewFile,BufRead * let b:mtrailingws=matchadd('ErrorMsg', 'if(', -1)
"au BufNewFile,BufRead * let b:mtrailingws=matchadd('ErrorMsg', '', -1)
au BufWinLeave *.* silent mkview
au BufWinEnter *.* silent loadview

"-----------------------------------Colors-----------------------------------------------"
"set t_Co=256
"set background=dark
"let g:hybrid_custom_term_colors = 1
"let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
colorscheme hybrid
"autocmd CursorMoved * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))
"autocmd CursorMoved * silent! exe printf("match Search /\\<%s\\>/",expand('<cword>'))

"set hlsearch "for search ingnore case and highlight
"highlight IncSearch ctermbg=NONE ctermfg=119 cterm=NONE
"hi Search ctermfg=Yellow ctermbg=NONE cterm=bold,underline
"
"set colorcolumn=120
"hi ColorColumn ctermbg=NONE ctermfg=red " at 80 position the symbol is red
""match OverLength /\%>80v.\+/ " highlight as red all from 80 position
""hi ColorColumn ctermbg=238 " just highlight the column
"hi FoldColumn term=NONE ctermfg=14 ctermbg=NONE guifg=Cyan guibg=Grey
"hi VertSplit ctermbg=grey ctermfg=grey guifg=#81a2be


"set listchars=tab:»\ ,eol:¶,trail:•
"hi GroupA ctermbg=blue ctermfg=NONE guibg=NONE
"hi GroupB ctermbg=gray ctermfg=NONE guibg=NONE
"match GroupA /\s\+$/
"match GroupB /\t/
"set listchars=tab:>-,trail:-,extends:#,nbsp:-
"set list " turn on highliting of bad writings

"----------------------------------------------------------------------------------"
"set guifont = "Menlo:12"
"set backspace=indent,eol,start
"
"set laststatus=2
"set statusline+=%#warningmsg#
""set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"set statusline=\
"set statusline+=%n:\ " buffer number
"set statusline+=%t " filename with full path
"set statusline+=%m " modified flag
"set statusline+=\ \
"set statusline+=%{&paste?'[paste]\ ':''}
"set statusline+=%{&fileencoding}
"set statusline+=\ \ %Y " type of file
"set statusline+=\ %3.3(%c%) " column number
"set statusline+=\ \ %3.9(%l/%L%) " line / total lines
"set statusline+=\ \ %{FileSize()}

function! FileSize()
   let bytes = getfsize(expand("%:p"))
   if bytes <= 0
      return ""
   endif
   if bytes < 1024
      return bytes . "B"
   else
      return (bytes / 1024) . "K"
   endif
endfunction

"au FileType edc setlocal expandtab shiftwidth=3 tabstop=3 softtabstop=3 syntax=edc

"au BufReadPost *.pdf silent %!pdftotext -nopgbrk "%" - |fmt -csw78 " use non text files in vim
"au BufReadPost *.doc silent %!antiword "%"
"au BufReadPost *.odt silent %!odt2txt "%"
" reread vim configuration after saving
autocmd! bufwritepost $MYVIMRC source $MYVIMRC
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

"disable arrow movement
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
noremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Easy window navigation
"map <C-h> <C-w>h
"map <C-j> <C-w>j
"map <C-k> <C-w>k
"map <C-l> <C-w>l
nnoremap <w-left> :vertical resize +5<cr>
nnoremap <w-right> :vertical resize -5<cr>
nnoremap B ^
nnoremap E $
inoremap jj <ESC>

au FocusLost * :wa

nmap <F2> :w<cr>
vmap <F2> <esc>:w<cr>i
imap <F2> <esc>:w<cr>i

"Grep commands
nnoremap <silent> <F3> :Rgrep<CR>
let Grep_Default_Options = '-nC 3'
let Grep_Default_Filelist = '*.[ch] *.cpp *.hpp'
let Grep_Skip_Dirs = 'build out'

"swich header-source
nmap <F4> :A<CR>

nnoremap <silent> <F8> :Ag<cr>

nmap <F5> <Esc>:BufExplorer<cr>
vmap <F5> <esc>:BufExplorer<cr>
imap <F5> <esc>:BufExplorer<cr>
let g:bufExplorerDetailedHelp=1
let g:bufExplorerShowRelativePath=1
let g:bufExplorerReverseSort=1

nmap <C-b> :TagbarToggle<CR>

nmap <silent> ,/ :nohlsearch<CR>
cmap w!! w !sudo tee % >/dev/null "for when you forgot to sudo before editing a file

" move between tabs
map <S-left> :tabp<cr>
nmap <S-left> :tabp<cr>
imap <S-left> <esc>:tabp<cr>i
map <S-right> :tabn<cr>
nmap <S-right> :tabn<cr>
imap <S-right> <esc>:tabn<cr>i
" map <C [> : Esc<cr>
